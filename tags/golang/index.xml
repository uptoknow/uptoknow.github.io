<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Welcome to My Site</title>
    <link>https://uptoknow.github.io/tags/golang/</link>
    <description>Recent content in Golang on Welcome to My Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Feb 2018 01:14:39 +0800</lastBuildDate>
    
	<atom:link href="https://uptoknow.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Learning Materials</title>
      <link>https://uptoknow.github.io/post/golang/golang-learning-maturial/</link>
      <pubDate>Sat, 03 Feb 2018 01:14:39 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/golang/golang-learning-maturial/</guid>
      <description>This is the page that collect golang related learning materials
 Online free materials:
 Tour of Go: Very quickstart for learning Go. Go by example: Go by Example is a hands-on introduction to Go using annotated example programs Effective Golang: Golang programming conventions, every Gopher should get farmiliar with this. Wiki Page: This include really a lot that you needed, including blogs, books, etc. Gopher talks: This is a site that contains the talks delivered from GopherCon  Tools for Go:</description>
    </item>
    
    <item>
      <title>Golang Names</title>
      <link>https://uptoknow.github.io/post/golang/golang-names/</link>
      <pubDate>Thu, 01 Feb 2018 11:23:48 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/golang/golang-names/</guid>
      <description>What&amp;rsquo;s Names You cannot give a variable a name the way you give a dog a name-because itâ€™s cute or it has good sound.
The most important consideration in naming a variable is that the name fully and accurately describe the entity the variable represents.
Names matter Readability is the defining quality of good code. Good names are critical to readability. This talk is about naming in Go.
Good names A good name is:</description>
    </item>
    
    <item>
      <title>Request Handling in Go</title>
      <link>https://uptoknow.github.io/post/golang/request-handling-in-go/</link>
      <pubDate>Mon, 11 Sep 2017 18:40:18 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/golang/request-handling-in-go/</guid>
      <description>Http handlers Processing HTTP requests with Go is primarily about two things: ServeMuxes and Handlers.
A ServeMux is essentially a HTTP request router (or multiplexor). It compares incoming requests against a list of predefined URL paths, and calls the associated handler for the path whenever a match is found.
Handlers are responsible for writing response headers and bodies. Almost any object can be a handler, so long as it satisfies the http.</description>
    </item>
    
  </channel>
</rss>