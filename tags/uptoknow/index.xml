<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uptoknow on UPTOKNOW</title>
    <link>https://uptoknow.github.io/tags/uptoknow/</link>
    <description>Recent content in Uptoknow on UPTOKNOW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Feb 2018 11:23:48 +0800</lastBuildDate>
    
	<atom:link href="https://uptoknow.github.io/tags/uptoknow/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Names</title>
      <link>https://uptoknow.github.io/post/golang/golang-names/</link>
      <pubDate>Thu, 01 Feb 2018 11:23:48 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/golang/golang-names/</guid>
      <description>What&amp;rsquo;s Names You cannot give a variable a name the way you give a dog a name-because it’s cute or it has good sound.
The most important consideration in naming a variable is that the name fully and accurately describe the entity the variable represents.
Names matter Readability is the defining quality of good code. Good names are critical to readability. This talk is about naming in Go.
Good names A good name is:</description>
    </item>
    
    <item>
      <title>Understand Json Patch</title>
      <link>https://uptoknow.github.io/post/json-patch/</link>
      <pubDate>Fri, 22 Sep 2017 16:42:11 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/json-patch/</guid>
      <description>When we update an resource using the API, we generially will first get the resource, and then update it, and put back the entire object, this can waste bandwidth and processtime for large resources. Another choice is we can use HTTP PATCH to send an json patch to the api server.
There are two kinds of patch you can use, JSON PATCH and JSON Merge Patch. Both have cons and pros.</description>
    </item>
    
    <item>
      <title>OpenShift with CoreOS Dex Openid Provider</title>
      <link>https://uptoknow.github.io/post/openshift-with-coreos-dex-openid-provider/</link>
      <pubDate>Fri, 15 Sep 2017 20:00:08 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/openshift-with-coreos-dex-openid-provider/</guid>
      <description>Overview Dex is an openid provider, opensourced by CoreOS,it can be integrated with k8s, and it also can be integrated with OpenShift,here I will write how to setup the openid provider with openshift.
Dex is not a user management system like ldap,saml,etc. but acts as a portal to other identity providers, it has different connectors that can be used to connect to different user management system, when you login use user/pass through the portal page of dex, it will generate an ID token for you.</description>
    </item>
    
    <item>
      <title>Openshift Keycloak Openid</title>
      <link>https://uptoknow.github.io/post/openshift-with-keycloak-openid/</link>
      <pubDate>Thu, 14 Sep 2017 18:28:15 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/openshift-with-keycloak-openid/</guid>
      <description>Keycloak is an powerful tools that can be used as openid provider and SAML auth provider, and here I will record how to integrate openshift with keycloak.
First, download the keycloak from here
Then, you neec setup the keycloak with https enabled, as openshift ask the openid provider to support https, see the openid spec here We will setup a standalone cluster and update the binding address, and we need generate the keystore for serve the https the standalone config file is at: standalone/configuration/standalone.</description>
    </item>
    
    <item>
      <title>Request Handling in Go</title>
      <link>https://uptoknow.github.io/post/golang/request-handling-in-go/</link>
      <pubDate>Mon, 11 Sep 2017 18:40:18 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/golang/request-handling-in-go/</guid>
      <description>Http handlers Processing HTTP requests with Go is primarily about two things: ServeMuxes and Handlers.
A ServeMux is essentially a HTTP request router (or multiplexor). It compares incoming requests against a list of predefined URL paths, and calls the associated handler for the path whenever a match is found.
Handlers are responsible for writing response headers and bodies. Almost any object can be a handler, so long as it satisfies the http.</description>
    </item>
    
    <item>
      <title>K8s Auth Proxy Example</title>
      <link>https://uptoknow.github.io/post/k8s-auth-proxy-example/</link>
      <pubDate>Sat, 12 Aug 2017 11:23:48 +0800</pubDate>
      
      <guid>https://uptoknow.github.io/post/k8s-auth-proxy-example/</guid>
      <description>K8S support different kind of auth type, one of it’s auth type is Authenticating Proxy, this allow user to use it’s auth provider to do the authentication, after pass the auth, sent the use related info(username, group, extra info) using http request headers to k8s api server, the headers can be defined using:
--requestheader-username-headers --requestheader-group-headers --requestheader-extra-headers-prefix  New people to this area are not very familiar how to setup a auth proxy and integrated with k8s, so I wish this blog can help you guys.</description>
    </item>
    
    <item>
      <title>Welcome to uptoknow!</title>
      <link>https://uptoknow.github.io/post/welcome/</link>
      <pubDate>Fri, 28 Jul 2017 09:32:45 -0400</pubDate>
      
      <guid>https://uptoknow.github.io/post/welcome/</guid>
      <description>Hello, welcome to visit my blog, I am a programer, java, python, bash, golang, ruby on rails,uptoknow means up to know, from unknow to know, which means keep learning, unknow will the know, I am a little lazy, I found when I learn some new things, I will forgot soon withoug record it, so I decide start to write blogs to sumarize the new tech I have learned, it&amp;rsquo;s easy to learn something, but it&amp;rsquo;s not easy to write a blog to systematize it.</description>
    </item>
    
  </channel>
</rss>